{"message":"unresolved import `nova_scotia::continue_recursive_circuit`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":117,"byte_end":143,"line_start":4,"line_end":4,"column_start":32,"column_end":58,"is_primary":true,"text":[{"text":"    circom::reader::load_r1cs, continue_recursive_circuit, create_public_params,","highlight_start":32,"highlight_end":58}],"label":"no `continue_recursive_circuit` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":117,"byte_end":143,"line_start":4,"line_end":4,"column_start":32,"column_end":58,"is_primary":true,"text":[{"text":"    circom::reader::load_r1cs, continue_recursive_circuit, create_public_params,","highlight_start":32,"highlight_end":58}],"label":null,"suggested_replacement":"create_recursive_circuit","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `nova_scotia::continue_recursive_circuit`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:4:32\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    circom::reader::load_r1cs, continue_recursive_circuit, create_public_params,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `continue_recursive_circuit` in the root\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar name exists in the module: `create_recursive_circuit`\u001b[0m\n\n"}
{"message":"module `bn256_grumpkin` is private","code":{"code":"E0603","explanation":"A private item was used outside its scope.\n\nErroneous code example:\n\n```compile_fail,E0603\nmod foo {\n    const PRIVATE: u32 = 0x_a_bad_1dea_u32; // This const is private, so we\n                                            // can't use it outside of the\n                                            // `foo` module.\n}\n\nprintln!(\"const value: {}\", foo::PRIVATE); // error: constant `PRIVATE`\n                                                  //        is private\n```\n\nIn order to fix this error, you need to make the item public by using the `pub`\nkeyword. Example:\n\n```\nmod foo {\n    pub const PRIVATE: u32 = 0x_a_bad_1dea_u32; // We set it public by using the\n                                                // `pub` keyword.\n}\n\nprintln!(\"const value: {}\", foo::PRIVATE); // ok!\n```\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":396,"byte_end":410,"line_start":11,"line_end":11,"column_start":25,"column_end":39,"is_primary":true,"text":[{"text":"    type G1 = provider::bn256_grumpkin::bn256::Point;","highlight_start":25,"highlight_end":39}],"label":"private module","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/toy_bn254.rs","byte_start":419,"byte_end":424,"line_start":11,"line_end":11,"column_start":48,"column_end":53,"is_primary":false,"text":[{"text":"    type G1 = provider::bn256_grumpkin::bn256::Point;","highlight_start":48,"highlight_end":53}],"label":"struct `Point` is not publicly re-exported","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the module `bn256_grumpkin` is defined here","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/provider/mod.rs","byte_start":251,"byte_end":280,"line_start":8,"line_end":8,"column_start":1,"column_end":30,"is_primary":true,"text":[{"text":"pub(crate) mod bn256_grumpkin;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0603]\u001b[0m\u001b[0m\u001b[1m: module `bn256_grumpkin` is private\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:11:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type G1 = provider::bn256_grumpkin::bn256::Point;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mstruct `Point` is not publicly re-exported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mprivate module\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the module `bn256_grumpkin` is defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/provider/mod.rs:8:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) mod bn256_grumpkin;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"module `bn256_grumpkin` is private","code":{"code":"E0603","explanation":"A private item was used outside its scope.\n\nErroneous code example:\n\n```compile_fail,E0603\nmod foo {\n    const PRIVATE: u32 = 0x_a_bad_1dea_u32; // This const is private, so we\n                                            // can't use it outside of the\n                                            // `foo` module.\n}\n\nprintln!(\"const value: {}\", foo::PRIVATE); // error: constant `PRIVATE`\n                                                  //        is private\n```\n\nIn order to fix this error, you need to make the item public by using the `pub`\nkeyword. Example:\n\n```\nmod foo {\n    pub const PRIVATE: u32 = 0x_a_bad_1dea_u32; // We set it public by using the\n                                                // `pub` keyword.\n}\n\nprintln!(\"const value: {}\", foo::PRIVATE); // ok!\n```\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":450,"byte_end":464,"line_start":12,"line_end":12,"column_start":25,"column_end":39,"is_primary":true,"text":[{"text":"    type G2 = provider::bn256_grumpkin::grumpkin::Point;","highlight_start":25,"highlight_end":39}],"label":"private module","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/toy_bn254.rs","byte_start":476,"byte_end":481,"line_start":12,"line_end":12,"column_start":51,"column_end":56,"is_primary":false,"text":[{"text":"    type G2 = provider::bn256_grumpkin::grumpkin::Point;","highlight_start":51,"highlight_end":56}],"label":"struct `Point` is not publicly re-exported","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the module `bn256_grumpkin` is defined here","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/provider/mod.rs","byte_start":251,"byte_end":280,"line_start":8,"line_end":8,"column_start":1,"column_end":30,"is_primary":true,"text":[{"text":"pub(crate) mod bn256_grumpkin;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0603]\u001b[0m\u001b[0m\u001b[1m: module `bn256_grumpkin` is private\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:12:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type G2 = provider::bn256_grumpkin::grumpkin::Point;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mstruct `Point` is not publicly re-exported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mprivate module\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the module `bn256_grumpkin` is defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/provider/mod.rs:8:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) mod bn256_grumpkin;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::bn256::curve::G1: Engine` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":1215,"byte_end":1241,"line_start":35,"line_end":35,"column_start":13,"column_end":39,"is_primary":true,"text":[{"text":"    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());","highlight_start":13,"highlight_end":39}],"label":"the trait `Engine` is not implemented for `halo2curves::bn256::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Engine`:\n  Bn256EngineKZG\n  Bn256Engine\n  GrumpkinEngine\n  Secp256k1Engine\n  Secq256k1Engine\n  PallasEngine\n  VestaEngine","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `PublicParams`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":1434,"byte_end":1446,"line_start":58,"line_end":58,"column_start":12,"column_end":24,"is_primary":false,"text":[{"text":"pub struct PublicParams<E1, E2, C1, C2>","highlight_start":12,"highlight_end":24}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":1475,"byte_end":1512,"line_start":60,"line_end":60,"column_start":7,"column_end":44,"is_primary":true,"text":[{"text":"  E1: Engine<Base = <E2 as Engine>::Scalar>,","highlight_start":7,"highlight_end":44}],"label":"required by this bound in `PublicParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::bn256::curve::G1: Engine` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:35:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Engine` is not implemented for `halo2curves::bn256::curve::G1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Engine`:\u001b[0m\n\u001b[0m             Bn256EngineKZG\u001b[0m\n\u001b[0m             Bn256Engine\u001b[0m\n\u001b[0m             GrumpkinEngine\u001b[0m\n\u001b[0m             Secp256k1Engine\u001b[0m\n\u001b[0m             Secq256k1Engine\u001b[0m\n\u001b[0m             PallasEngine\u001b[0m\n\u001b[0m             VestaEngine\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `PublicParams`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:60:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<E1, E2, C1, C2>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  E1: Engine<Base = <E2 as Engine>::Scalar>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PublicParams`\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::grumpkin::curve::G1: Engine` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":1215,"byte_end":1241,"line_start":35,"line_end":35,"column_start":13,"column_end":39,"is_primary":true,"text":[{"text":"    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());","highlight_start":13,"highlight_end":39}],"label":"the trait `Engine` is not implemented for `halo2curves::grumpkin::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Engine`:\n  Bn256EngineKZG\n  Bn256Engine\n  GrumpkinEngine\n  Secp256k1Engine\n  Secq256k1Engine\n  PallasEngine\n  VestaEngine","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::grumpkin::curve::G1: Engine` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:35:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Engine` is not implemented for `halo2curves::grumpkin::curve::G1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Engine`:\u001b[0m\n\u001b[0m             Bn256EngineKZG\u001b[0m\n\u001b[0m             Bn256Engine\u001b[0m\n\u001b[0m             GrumpkinEngine\u001b[0m\n\u001b[0m             Secp256k1Engine\u001b[0m\n\u001b[0m             Secq256k1Engine\u001b[0m\n\u001b[0m             PallasEngine\u001b[0m\n\u001b[0m             VestaEngine\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::grumpkin::curve::G1: nova_snark::traits::Group` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":772,"byte_end":791,"line_start":23,"line_end":23,"column_start":16,"column_end":35,"is_primary":true,"text":[{"text":"    let r1cs = load_r1cs::<G1, G2>(&FileLocation::PathBuf(circuit_file));","highlight_start":16,"highlight_end":35}],"label":"the trait `nova_snark::traits::Group` is not implemented for `halo2curves::grumpkin::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `nova_snark::traits::Group`:\n  pasta_curves::curves::Ep\n  pasta_curves::curves::Eq\n  halo2curves::bn256::curve::G1\n  halo2curves::grumpkin::curve::G1","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::grumpkin::curve::G1: nova_snark::traits::Group` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:23:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let r1cs = load_r1cs::<G1, G2>(&FileLocation::PathBuf(circuit_file));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `nova_snark::traits::Group` is not implemented for `halo2curves::grumpkin::curve::G1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nova_snark::traits::Group`:\u001b[0m\n\u001b[0m             pasta_curves::curves::Ep\u001b[0m\n\u001b[0m             pasta_curves::curves::Eq\u001b[0m\n\u001b[0m             halo2curves::bn256::curve::G1\u001b[0m\n\u001b[0m             halo2curves::grumpkin::curve::G1\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":772,"byte_end":791,"line_start":23,"line_end":23,"column_start":16,"column_end":35,"is_primary":true,"text":[{"text":"    let r1cs = load_r1cs::<G1, G2>(&FileLocation::PathBuf(circuit_file));","highlight_start":16,"highlight_end":35}],"label":"the trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `nova_snark::traits::Group`:\n  pasta_curves::curves::Ep\n  pasta_curves::curves::Eq\n  halo2curves::bn256::curve::G1\n  halo2curves::grumpkin::curve::G1","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:23:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let r1cs = load_r1cs::<G1, G2>(&FileLocation::PathBuf(circuit_file));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nova_snark::traits::Group`:\u001b[0m\n\u001b[0m             pasta_curves::curves::Ep\u001b[0m\n\u001b[0m             pasta_curves::curves::Eq\u001b[0m\n\u001b[0m             halo2curves::bn256::curve::G1\u001b[0m\n\u001b[0m             halo2curves::grumpkin::curve::G1\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":1163,"byte_end":1170,"line_start":33,"line_end":33,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"    let start_public_input = [F::<G1>::from(10), F::<G1>::from(10)];","highlight_start":31,"highlight_end":38}],"label":"the trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `nova_snark::traits::Group`:\n  pasta_curves::curves::Ep\n  pasta_curves::curves::Eq\n  halo2curves::bn256::curve::G1\n  halo2curves::grumpkin::curve::G1","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:33:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let start_public_input = [F::<G1>::from(10), F::<G1>::from(10)];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nova_snark::traits::Group`:\u001b[0m\n\u001b[0m             pasta_curves::curves::Ep\u001b[0m\n\u001b[0m             pasta_curves::curves::Eq\u001b[0m\n\u001b[0m             halo2curves::bn256::curve::G1\u001b[0m\n\u001b[0m             halo2curves::grumpkin::curve::G1\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":1182,"byte_end":1189,"line_start":33,"line_end":33,"column_start":50,"column_end":57,"is_primary":true,"text":[{"text":"    let start_public_input = [F::<G1>::from(10), F::<G1>::from(10)];","highlight_start":50,"highlight_end":57}],"label":"the trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `nova_snark::traits::Group`:\n  pasta_curves::curves::Ep\n  pasta_curves::curves::Eq\n  halo2curves::bn256::curve::G1\n  halo2curves::grumpkin::curve::G1","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:33:50\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let start_public_input = [F::<G1>::from(10), F::<G1>::from(10)];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nova_snark::traits::Group`:\u001b[0m\n\u001b[0m             pasta_curves::curves::Ep\u001b[0m\n\u001b[0m             pasta_curves::curves::Eq\u001b[0m\n\u001b[0m             halo2curves::bn256::curve::G1\u001b[0m\n\u001b[0m             halo2curves::grumpkin::curve::G1\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":1244,"byte_end":1278,"line_start":35,"line_end":35,"column_start":42,"column_end":76,"is_primary":true,"text":[{"text":"    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());","highlight_start":42,"highlight_end":76}],"label":"expected `PublicParams<G1, G1, _, _>`, found `PublicParams<_, _, ..., ...>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/toy_bn254.rs","byte_start":1215,"byte_end":1241,"line_start":35,"line_end":35,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());","highlight_start":13,"highlight_end":39}],"label":"expected due to this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`PublicParams<_, _, ..., ...>` and `PublicParams<G1, G1, _, _>` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs","byte_start":1390,"byte_end":1429,"line_start":54,"line_end":54,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<G1, G2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`PublicParams<G1, G1, _, _>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":1423,"byte_end":1462,"line_start":58,"line_end":58,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<E1, E2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `nova_snark` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:35:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `PublicParams<G1, G1, _, _>`, found `PublicParams<_, _, ..., ...>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected due to this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `PublicParams<_, _, ..., ...>` and `PublicParams<G1, G1, _, _>` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs:54:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<G1, G2, C1, C2>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<G1, G1, _, _>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:58:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<E1, E2, C1, C2>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `nova_snark` are being used?\u001b[0m\n\n"}
{"message":"the method `num_constraints` exists for struct `PublicParams<G1, G1, _, _>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":1370,"byte_end":1385,"line_start":39,"line_end":39,"column_start":12,"column_end":27,"is_primary":true,"text":[{"text":"        pp.num_constraints().0","highlight_start":12,"highlight_end":27}],"label":"method cannot be called on `PublicParams<G1, G1, _, _>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<_ as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/bn256/curve.rs","byte_start":1017,"byte_end":1255,"line_start":31,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X,G1_GENERATOR_Y),","highlight_start":1,"highlight_end":37},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"bn256_g1\",","highlight_start":1,"highlight_end":16},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `halo2curves::bn256::curve::G1: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/bn256/curve.rs","byte_start":1017,"byte_end":1255,"line_start":31,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X,G1_GENERATOR_Y),","highlight_start":1,"highlight_end":37},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"bn256_g1\",","highlight_start":1,"highlight_end":16},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<_ as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/grumpkin/curve.rs","byte_start":937,"byte_end":1179,"line_start":28,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X, G1_GENERATOR_Y),","highlight_start":1,"highlight_end":38},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"grumpkin_g1\",","highlight_start":1,"highlight_end":19},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `halo2curves::grumpkin::curve::G1: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/grumpkin/curve.rs","byte_start":937,"byte_end":1179,"line_start":28,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X, G1_GENERATOR_Y),","highlight_start":1,"highlight_end":38},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"grumpkin_g1\",","highlight_start":1,"highlight_end":19},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`<halo2curves::bn256::curve::G1 as Engine>::Base = _`\n`<halo2curves::grumpkin::curve::G1 as Engine>::Base = _`\n`halo2curves::bn256::curve::G1: Engine`\n`halo2curves::grumpkin::curve::G1: Engine`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `num_constraints` exists for struct `PublicParams<G1, G1, _, _>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:39:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m        pp.num_constraints().0\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `PublicParams<G1, G1, _, _>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/grumpkin/curve.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m   \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    G1,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    G1Affine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as Engine>::Base = _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `halo2curves::grumpkin::curve::G1: Engine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/bn256/curve.rs:31:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    G1,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    G1Affine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as Engine>::Base = _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `halo2curves::bn256::curve::G1: Engine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `<halo2curves::bn256::curve::G1 as Engine>::Base = _`\u001b[0m\n\u001b[0m           `<halo2curves::grumpkin::curve::G1 as Engine>::Base = _`\u001b[0m\n\u001b[0m           `halo2curves::bn256::curve::G1: Engine`\u001b[0m\n\u001b[0m           `halo2curves::grumpkin::curve::G1: Engine`\u001b[0m\n\n"}
{"message":"the method `num_constraints` exists for struct `PublicParams<G1, G1, _, _>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":1488,"byte_end":1503,"line_start":43,"line_end":43,"column_start":12,"column_end":27,"is_primary":true,"text":[{"text":"        pp.num_constraints().1","highlight_start":12,"highlight_end":27}],"label":"method cannot be called on `PublicParams<G1, G1, _, _>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<_ as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/bn256/curve.rs","byte_start":1017,"byte_end":1255,"line_start":31,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X,G1_GENERATOR_Y),","highlight_start":1,"highlight_end":37},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"bn256_g1\",","highlight_start":1,"highlight_end":16},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `halo2curves::bn256::curve::G1: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/bn256/curve.rs","byte_start":1017,"byte_end":1255,"line_start":31,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X,G1_GENERATOR_Y),","highlight_start":1,"highlight_end":37},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"bn256_g1\",","highlight_start":1,"highlight_end":16},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<_ as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/grumpkin/curve.rs","byte_start":937,"byte_end":1179,"line_start":28,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X, G1_GENERATOR_Y),","highlight_start":1,"highlight_end":38},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"grumpkin_g1\",","highlight_start":1,"highlight_end":19},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `halo2curves::grumpkin::curve::G1: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/grumpkin/curve.rs","byte_start":937,"byte_end":1179,"line_start":28,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X, G1_GENERATOR_Y),","highlight_start":1,"highlight_end":38},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"grumpkin_g1\",","highlight_start":1,"highlight_end":19},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`<halo2curves::bn256::curve::G1 as Engine>::Base = _`\n`<halo2curves::grumpkin::curve::G1 as Engine>::Base = _`\n`halo2curves::bn256::curve::G1: Engine`\n`halo2curves::grumpkin::curve::G1: Engine`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `num_constraints` exists for struct `PublicParams<G1, G1, _, _>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:43:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m        pp.num_constraints().1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `PublicParams<G1, G1, _, _>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/grumpkin/curve.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m   \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    G1,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    G1Affine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as Engine>::Base = _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `halo2curves::grumpkin::curve::G1: Engine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/bn256/curve.rs:31:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    G1,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    G1Affine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as Engine>::Base = _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `halo2curves::bn256::curve::G1: Engine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `<halo2curves::bn256::curve::G1 as Engine>::Base = _`\u001b[0m\n\u001b[0m           `<halo2curves::grumpkin::curve::G1 as Engine>::Base = _`\u001b[0m\n\u001b[0m           `halo2curves::bn256::curve::G1: Engine`\u001b[0m\n\u001b[0m           `halo2curves::grumpkin::curve::G1: Engine`\u001b[0m\n\n"}
{"message":"the method `num_variables` exists for struct `PublicParams<G1, G1, _, _>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":1603,"byte_end":1616,"line_start":48,"line_end":48,"column_start":12,"column_end":25,"is_primary":true,"text":[{"text":"        pp.num_variables().0","highlight_start":12,"highlight_end":25}],"label":"method cannot be called on `PublicParams<G1, G1, _, _>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<_ as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/bn256/curve.rs","byte_start":1017,"byte_end":1255,"line_start":31,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X,G1_GENERATOR_Y),","highlight_start":1,"highlight_end":37},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"bn256_g1\",","highlight_start":1,"highlight_end":16},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `halo2curves::bn256::curve::G1: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/bn256/curve.rs","byte_start":1017,"byte_end":1255,"line_start":31,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X,G1_GENERATOR_Y),","highlight_start":1,"highlight_end":37},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"bn256_g1\",","highlight_start":1,"highlight_end":16},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<_ as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/grumpkin/curve.rs","byte_start":937,"byte_end":1179,"line_start":28,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X, G1_GENERATOR_Y),","highlight_start":1,"highlight_end":38},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"grumpkin_g1\",","highlight_start":1,"highlight_end":19},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `halo2curves::grumpkin::curve::G1: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/grumpkin/curve.rs","byte_start":937,"byte_end":1179,"line_start":28,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X, G1_GENERATOR_Y),","highlight_start":1,"highlight_end":38},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"grumpkin_g1\",","highlight_start":1,"highlight_end":19},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`<halo2curves::bn256::curve::G1 as Engine>::Base = _`\n`<halo2curves::grumpkin::curve::G1 as Engine>::Base = _`\n`halo2curves::bn256::curve::G1: Engine`\n`halo2curves::grumpkin::curve::G1: Engine`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `num_variables` exists for struct `PublicParams<G1, G1, _, _>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:48:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m        pp.num_variables().0\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `PublicParams<G1, G1, _, _>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/grumpkin/curve.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m   \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    G1,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    G1Affine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as Engine>::Base = _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `halo2curves::grumpkin::curve::G1: Engine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/bn256/curve.rs:31:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    G1,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    G1Affine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as Engine>::Base = _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `halo2curves::bn256::curve::G1: Engine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `<halo2curves::bn256::curve::G1 as Engine>::Base = _`\u001b[0m\n\u001b[0m           `<halo2curves::grumpkin::curve::G1 as Engine>::Base = _`\u001b[0m\n\u001b[0m           `halo2curves::bn256::curve::G1: Engine`\u001b[0m\n\u001b[0m           `halo2curves::grumpkin::curve::G1: Engine`\u001b[0m\n\n"}
{"message":"the method `num_variables` exists for struct `PublicParams<G1, G1, _, _>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":1717,"byte_end":1730,"line_start":52,"line_end":52,"column_start":12,"column_end":25,"is_primary":true,"text":[{"text":"        pp.num_variables().1","highlight_start":12,"highlight_end":25}],"label":"method cannot be called on `PublicParams<G1, G1, _, _>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<_ as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/bn256/curve.rs","byte_start":1017,"byte_end":1255,"line_start":31,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X,G1_GENERATOR_Y),","highlight_start":1,"highlight_end":37},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"bn256_g1\",","highlight_start":1,"highlight_end":16},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `halo2curves::bn256::curve::G1: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/bn256/curve.rs","byte_start":1017,"byte_end":1255,"line_start":31,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X,G1_GENERATOR_Y),","highlight_start":1,"highlight_end":37},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"bn256_g1\",","highlight_start":1,"highlight_end":16},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<_ as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/grumpkin/curve.rs","byte_start":937,"byte_end":1179,"line_start":28,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X, G1_GENERATOR_Y),","highlight_start":1,"highlight_end":38},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"grumpkin_g1\",","highlight_start":1,"highlight_end":19},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":12801,"byte_end":12802,"line_start":298,"line_end":298,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `halo2curves::grumpkin::curve::G1: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/grumpkin/curve.rs","byte_start":937,"byte_end":1179,"line_start":28,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    G1,","highlight_start":1,"highlight_end":8},{"text":"    G1Affine,","highlight_start":1,"highlight_end":14},{"text":"    false,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fr,","highlight_start":1,"highlight_end":8},{"text":"    (G1_GENERATOR_X, G1_GENERATOR_Y),","highlight_start":1,"highlight_end":38},{"text":"    G1_A,","highlight_start":1,"highlight_end":10},{"text":"    G1_B,","highlight_start":1,"highlight_end":10},{"text":"    \"grumpkin_g1\",","highlight_start":1,"highlight_end":19},{"text":"    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),","highlight_start":1,"highlight_end":87},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/derive/curve.rs","byte_start":2254,"byte_end":2281,"line_start":53,"line_end":53,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`<halo2curves::bn256::curve::G1 as Engine>::Base = _`\n`<halo2curves::grumpkin::curve::G1 as Engine>::Base = _`\n`halo2curves::bn256::curve::G1: Engine`\n`halo2curves::grumpkin::curve::G1: Engine`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `num_variables` exists for struct `PublicParams<G1, G1, _, _>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:52:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m        pp.num_variables().1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `PublicParams<G1, G1, _, _>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/grumpkin/curve.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m   \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    G1,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    G1Affine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as Engine>::Base = _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `halo2curves::grumpkin::curve::G1: Engine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2curves-0.4.0/src/bn256/curve.rs:31:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    G1,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    G1Affine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    |curve_id, domain_prefix| svdw_hash_to_curve(curve_id, domain_prefix, G1::SVDW_Z),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as Engine>::Base = _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `halo2curves::bn256::curve::G1: Engine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `<halo2curves::bn256::curve::G1 as Engine>::Base = _`\u001b[0m\n\u001b[0m           `<halo2curves::grumpkin::curve::G1 as Engine>::Base = _`\u001b[0m\n\u001b[0m           `halo2curves::bn256::curve::G1: Engine`\u001b[0m\n\u001b[0m           `halo2curves::grumpkin::curve::G1: Engine`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2031,"byte_end":2034,"line_start":62,"line_end":62,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        &pp,","highlight_start":9,"highlight_end":12}],"label":"expected `&PublicParams<_, _, ..., ...>`, found `&PublicParams<G1, G1, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/toy_bn254.rs","byte_start":1851,"byte_end":1875,"line_start":57,"line_end":57,"column_start":31,"column_end":55,"is_primary":false,"text":[{"text":"    let mut recursive_snark = create_recursive_circuit(","highlight_start":31,"highlight_end":55}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`PublicParams<G1, G1, _, _>` and `PublicParams<_, _, ..., ...>` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`PublicParams<G1, G1, _, _>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":1423,"byte_end":1462,"line_start":58,"line_end":58,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<E1, E2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs","byte_start":1390,"byte_end":1429,"line_start":54,"line_end":54,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<G1, G2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `nova_snark` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-scotia-0.5.0/src/lib.rs","byte_start":4502,"byte_end":4526,"line_start":156,"line_end":156,"column_start":8,"column_end":32,"is_primary":true,"text":[{"text":"pub fn create_recursive_circuit<G1, G2>(","highlight_start":8,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:62:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut recursive_snark = create_recursive_circuit(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this function are incorrect\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &pp,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&PublicParams<_, _, ..., ...>`, found `&PublicParams<G1, G1, _, _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `PublicParams<G1, G1, _, _>` and `PublicParams<_, _, ..., ...>` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<G1, G1, _, _>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:58:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<E1, E2, C1, C2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs:54:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<G1, G2, C1, C2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `nova_snark` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-scotia-0.5.0/src/lib.rs:156:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn create_recursive_circuit<G1, G2>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::grumpkin::curve::G1: nova_snark::traits::Group` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2170,"byte_end":2177,"line_start":68,"line_end":68,"column_start":25,"column_end":32,"is_primary":true,"text":[{"text":"    let z0_secondary = [F::<G2>::from(0)];","highlight_start":25,"highlight_end":32}],"label":"the trait `nova_snark::traits::Group` is not implemented for `halo2curves::grumpkin::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `nova_snark::traits::Group`:\n  pasta_curves::curves::Ep\n  pasta_curves::curves::Eq\n  halo2curves::bn256::curve::G1\n  halo2curves::grumpkin::curve::G1","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::grumpkin::curve::G1: nova_snark::traits::Group` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:68:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let z0_secondary = [F::<G2>::from(0)];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `nova_snark::traits::Group` is not implemented for `halo2curves::grumpkin::curve::G1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nova_snark::traits::Group`:\u001b[0m\n\u001b[0m             pasta_curves::curves::Ep\u001b[0m\n\u001b[0m             pasta_curves::curves::Eq\u001b[0m\n\u001b[0m             halo2curves::bn256::curve::G1\u001b[0m\n\u001b[0m             halo2curves::grumpkin::curve::G1\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2340,"byte_end":2343,"line_start":73,"line_end":73,"column_start":38,"column_end":41,"is_primary":true,"text":[{"text":"    let res = recursive_snark.verify(&pp, iteration_count, &start_public_input, &z0_secondary);","highlight_start":38,"highlight_end":41}],"label":"expected `&PublicParams<_, _, ..., ...>`, found `&PublicParams<G1, G1, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/toy_bn254.rs","byte_start":2333,"byte_end":2339,"line_start":73,"line_end":73,"column_start":31,"column_end":37,"is_primary":false,"text":[{"text":"    let res = recursive_snark.verify(&pp, iteration_count, &start_public_input, &z0_secondary);","highlight_start":31,"highlight_end":37}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`PublicParams<G1, G1, _, _>` and `PublicParams<_, _, ..., ...>` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`PublicParams<G1, G1, _, _>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":1423,"byte_end":1462,"line_start":58,"line_end":58,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<E1, E2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs","byte_start":1390,"byte_end":1429,"line_start":54,"line_end":54,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<G1, G2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `nova_snark` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs","byte_start":12917,"byte_end":12923,"line_start":399,"line_end":399,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"  pub fn verify(","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:73:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = recursive_snark.verify(&pp, iteration_count, &start_public_input, &z0_secondary);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&PublicParams<_, _, ..., ...>`, found `&PublicParams<G1, G1, _, _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `PublicParams<G1, G1, _, _>` and `PublicParams<_, _, ..., ...>` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<G1, G1, _, _>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:58:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<E1, E2, C1, C2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs:54:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<G1, G2, C1, C2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `nova_snark` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs:399:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  pub fn verify(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2595,"byte_end":2602,"line_start":83,"line_end":83,"column_start":27,"column_end":34,"is_primary":true,"text":[{"text":"    assert_eq!(z_last[0], F::<G1>::from(20));","highlight_start":27,"highlight_end":34}],"label":"the trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `nova_snark::traits::Group`:\n  pasta_curves::curves::Ep\n  pasta_curves::curves::Eq\n  halo2curves::bn256::curve::G1\n  halo2curves::grumpkin::curve::G1","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:83:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    assert_eq!(z_last[0], F::<G1>::from(20));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nova_snark::traits::Group`:\u001b[0m\n\u001b[0m             pasta_curves::curves::Ep\u001b[0m\n\u001b[0m             pasta_curves::curves::Eq\u001b[0m\n\u001b[0m             halo2curves::bn256::curve::G1\u001b[0m\n\u001b[0m             halo2curves::grumpkin::curve::G1\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2641,"byte_end":2648,"line_start":84,"line_end":84,"column_start":27,"column_end":34,"is_primary":true,"text":[{"text":"    assert_eq!(z_last[1], F::<G1>::from(70));","highlight_start":27,"highlight_end":34}],"label":"the trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `nova_snark::traits::Group`:\n  pasta_curves::curves::Ep\n  pasta_curves::curves::Eq\n  halo2curves::bn256::curve::G1\n  halo2curves::grumpkin::curve::G1","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:84:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    assert_eq!(z_last[1], F::<G1>::from(70));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nova_snark::traits::Group`:\u001b[0m\n\u001b[0m             pasta_curves::curves::Ep\u001b[0m\n\u001b[0m             pasta_curves::curves::Eq\u001b[0m\n\u001b[0m             halo2curves::bn256::curve::G1\u001b[0m\n\u001b[0m             halo2curves::grumpkin::curve::G1\u001b[0m\n\n"}
{"message":"the function or associated item `setup` exists for struct `CompressedSNARK<_, _, _, _, RelaxedR1CSSNARK<G1, EvaluationEngine<G1>>, RelaxedR1CSSNARK<G1, ...>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2867,"byte_end":2872,"line_start":89,"line_end":89,"column_start":65,"column_end":70,"is_primary":true,"text":[{"text":"    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();","highlight_start":65,"highlight_end":70}],"label":"function or associated item cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: Deserialize<'de>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: RelaxedR1CSSNARKTrait<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: Serialize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: Sized`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: Sync`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the full type name has been written to '/Users/nk-mac/Documents/Research/nova_mathproofs/target/debug/examples/toy_bn254-f4efd205af81486a.long-type-17300600696272639138.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following trait bounds were not satisfied:\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: Sized`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: Sized`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: serde::de::Deserialize<'de>`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: serde::ser::Serialize`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: Sync`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: Send`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: serde::de::Deserialize<'de>`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: serde::ser::Serialize`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: Sync`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: Send`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the function or associated item `setup` exists for struct `CompressedSNARK<_, _, _, _, RelaxedR1CSSNARK<G1, EvaluationEngine<G1>>, RelaxedR1CSSNARK<G1, ...>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:89:65\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs:50:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Deserialize<'de>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Serialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Sized`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Sync`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/nk-mac/Documents/Research/nova_mathproofs/target/debug/examples/toy_bn254-f4efd205af81486a.long-type-17300600696272639138.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: Sized`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: Sized`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: serde::de::Deserialize<'de>`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: serde::ser::Serialize`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: Sync`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: Send`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: serde::de::Deserialize<'de>`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: serde::ser::Serialize`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: Sync`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: Send`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\n"}
{"message":"the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2822,"byte_end":2865,"line_start":89,"line_end":89,"column_start":20,"column_end":63,"is_primary":true,"text":[{"text":"    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();","highlight_start":20,"highlight_end":63}],"label":"the trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\n  nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\n  nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CompressedSNARK`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20636,"byte_end":20651,"line_start":635,"line_end":635,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"pub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>","highlight_start":12,"highlight_end":27}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20840,"byte_end":20865,"line_start":641,"line_end":641,"column_start":7,"column_end":32,"is_primary":true,"text":[{"text":"  S1: RelaxedR1CSSNARKTrait<E1>,","highlight_start":7,"highlight_end":32}],"label":"required by this bound in `CompressedSNARK`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:89:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\u001b[0m\n\u001b[0m              nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m              nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CompressedSNARK`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:641:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m635\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  S1: RelaxedR1CSSNARKTrait<E1>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CompressedSNARK`\u001b[0m\n\n"}
{"message":"the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2822,"byte_end":2865,"line_start":89,"line_end":89,"column_start":20,"column_end":63,"is_primary":true,"text":[{"text":"    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();","highlight_start":20,"highlight_end":63}],"label":"the trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\n  nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\n  nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CompressedSNARK`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20636,"byte_end":20651,"line_start":635,"line_end":635,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"pub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>","highlight_start":12,"highlight_end":27}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20873,"byte_end":20898,"line_start":642,"line_end":642,"column_start":7,"column_end":32,"is_primary":true,"text":[{"text":"  S2: RelaxedR1CSSNARKTrait<E2>,","highlight_start":7,"highlight_end":32}],"label":"required by this bound in `CompressedSNARK`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:89:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\u001b[0m\n\u001b[0m              nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m              nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CompressedSNARK`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:642:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m635\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m642\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  S2: RelaxedR1CSSNARKTrait<E2>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CompressedSNARK`\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2822,"byte_end":2865,"line_start":89,"line_end":89,"column_start":20,"column_end":63,"is_primary":true,"text":[{"text":"    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();","highlight_start":20,"highlight_end":63}],"label":"the trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `nova_snark::traits::Group`:\n  pasta_curves::curves::Ep\n  pasta_curves::curves::Eq\n  halo2curves::bn256::curve::G1\n  halo2curves::grumpkin::curve::G1","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `nova_snark::spartan::snark::RelaxedR1CSSNARK`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1733,"byte_end":1738,"line_start":50,"line_end":50,"column_start":32,"column_end":37,"is_primary":true,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":32,"highlight_end":37}],"label":"required by this bound in `RelaxedR1CSSNARK`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:89:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nova_snark::traits::Group`:\u001b[0m\n\u001b[0m             pasta_curves::curves::Ep\u001b[0m\n\u001b[0m             pasta_curves::curves::Eq\u001b[0m\n\u001b[0m             halo2curves::bn256::curve::G1\u001b[0m\n\u001b[0m             halo2curves::grumpkin::curve::G1\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `nova_snark::spartan::snark::RelaxedR1CSSNARK`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs:50:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RelaxedR1CSSNARK`\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::grumpkin::curve::G1: nova_snark::traits::Group` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2822,"byte_end":2865,"line_start":89,"line_end":89,"column_start":20,"column_end":63,"is_primary":true,"text":[{"text":"    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();","highlight_start":20,"highlight_end":63}],"label":"the trait `nova_snark::traits::Group` is not implemented for `halo2curves::grumpkin::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `nova_snark::traits::Group`:\n  pasta_curves::curves::Ep\n  pasta_curves::curves::Eq\n  halo2curves::bn256::curve::G1\n  halo2curves::grumpkin::curve::G1","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `nova_snark::spartan::snark::RelaxedR1CSSNARK`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1733,"byte_end":1738,"line_start":50,"line_end":50,"column_start":32,"column_end":37,"is_primary":true,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":32,"highlight_end":37}],"label":"required by this bound in `RelaxedR1CSSNARK`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::grumpkin::curve::G1: nova_snark::traits::Group` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:89:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `nova_snark::traits::Group` is not implemented for `halo2curves::grumpkin::curve::G1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nova_snark::traits::Group`:\u001b[0m\n\u001b[0m             pasta_curves::curves::Ep\u001b[0m\n\u001b[0m             pasta_curves::curves::Eq\u001b[0m\n\u001b[0m             halo2curves::bn256::curve::G1\u001b[0m\n\u001b[0m             halo2curves::grumpkin::curve::G1\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `nova_snark::spartan::snark::RelaxedR1CSSNARK`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs:50:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RelaxedR1CSSNARK`\u001b[0m\n\n"}
{"message":"the function or associated item `prove` exists for struct `CompressedSNARK<_, _, _, _, RelaxedR1CSSNARK<G1, EvaluationEngine<G1>>, RelaxedR1CSSNARK<G1, ...>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2947,"byte_end":2952,"line_start":90,"line_end":90,"column_start":60,"column_end":65,"is_primary":true,"text":[{"text":"    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);","highlight_start":60,"highlight_end":65}],"label":"function or associated item cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: Deserialize<'de>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: RelaxedR1CSSNARKTrait<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: Serialize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: Sized`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: Sync`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the full type name has been written to '/Users/nk-mac/Documents/Research/nova_mathproofs/target/debug/examples/toy_bn254-f4efd205af81486a.long-type-10753179559950823733.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following trait bounds were not satisfied:\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: Sized`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: Sized`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: serde::de::Deserialize<'de>`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: serde::ser::Serialize`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: Sync`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: Send`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: serde::de::Deserialize<'de>`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: serde::ser::Serialize`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: Sync`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: Send`\nwhich is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the function or associated item `prove` exists for struct `CompressedSNARK<_, _, _, _, RelaxedR1CSSNARK<G1, EvaluationEngine<G1>>, RelaxedR1CSSNARK<G1, ...>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:90:60\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs:50:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Deserialize<'de>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Serialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Sized`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Sync`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/nk-mac/Documents/Research/nova_mathproofs/target/debug/examples/toy_bn254-f4efd205af81486a.long-type-10753179559950823733.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: Sized`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: Sized`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: serde::de::Deserialize<'de>`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: serde::ser::Serialize`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: Sync`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: Send`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: serde::de::Deserialize<'de>`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: serde::ser::Serialize`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: Sync`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: Send`\u001b[0m\n\u001b[0m           which is required by `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\n"}
{"message":"the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2902,"byte_end":2945,"line_start":90,"line_end":90,"column_start":15,"column_end":58,"is_primary":true,"text":[{"text":"    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);","highlight_start":15,"highlight_end":58}],"label":"the trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\n  nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\n  nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CompressedSNARK`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20636,"byte_end":20651,"line_start":635,"line_end":635,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"pub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>","highlight_start":12,"highlight_end":27}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20840,"byte_end":20865,"line_start":641,"line_end":641,"column_start":7,"column_end":32,"is_primary":true,"text":[{"text":"  S1: RelaxedR1CSSNARKTrait<E1>,","highlight_start":7,"highlight_end":32}],"label":"required by this bound in `CompressedSNARK`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>: RelaxedR1CSSNARKTrait<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:90:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::bn256::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::bn256::curve::G1>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\u001b[0m\n\u001b[0m              nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m              nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CompressedSNARK`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:641:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m635\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  S1: RelaxedR1CSSNARKTrait<E1>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CompressedSNARK`\u001b[0m\n\n"}
{"message":"the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2902,"byte_end":2945,"line_start":90,"line_end":90,"column_start":15,"column_end":58,"is_primary":true,"text":[{"text":"    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);","highlight_start":15,"highlight_end":58}],"label":"the trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\n  nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\n  nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CompressedSNARK`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20636,"byte_end":20651,"line_start":635,"line_end":635,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"pub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>","highlight_start":12,"highlight_end":27}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20873,"byte_end":20898,"line_start":642,"line_end":642,"column_start":7,"column_end":32,"is_primary":true,"text":[{"text":"  S2: RelaxedR1CSSNARKTrait<E2>,","highlight_start":7,"highlight_end":32}],"label":"required by this bound in `CompressedSNARK`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>: RelaxedR1CSSNARKTrait<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:90:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<halo2curves::grumpkin::curve::G1, nova_snark::provider::ipa_pc::EvaluationEngine<halo2curves::grumpkin::curve::G1>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\u001b[0m\n\u001b[0m              nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m              nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CompressedSNARK`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:642:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m635\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m642\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  S2: RelaxedR1CSSNARKTrait<E2>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CompressedSNARK`\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2902,"byte_end":2945,"line_start":90,"line_end":90,"column_start":15,"column_end":58,"is_primary":true,"text":[{"text":"    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);","highlight_start":15,"highlight_end":58}],"label":"the trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `nova_snark::traits::Group`:\n  pasta_curves::curves::Ep\n  pasta_curves::curves::Eq\n  halo2curves::bn256::curve::G1\n  halo2curves::grumpkin::curve::G1","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `nova_snark::spartan::snark::RelaxedR1CSSNARK`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1733,"byte_end":1738,"line_start":50,"line_end":50,"column_start":32,"column_end":37,"is_primary":true,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":32,"highlight_end":37}],"label":"required by this bound in `RelaxedR1CSSNARK`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:90:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nova_snark::traits::Group`:\u001b[0m\n\u001b[0m             pasta_curves::curves::Ep\u001b[0m\n\u001b[0m             pasta_curves::curves::Eq\u001b[0m\n\u001b[0m             halo2curves::bn256::curve::G1\u001b[0m\n\u001b[0m             halo2curves::grumpkin::curve::G1\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `nova_snark::spartan::snark::RelaxedR1CSSNARK`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs:50:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RelaxedR1CSSNARK`\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::grumpkin::curve::G1: nova_snark::traits::Group` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":2902,"byte_end":2945,"line_start":90,"line_end":90,"column_start":15,"column_end":58,"is_primary":true,"text":[{"text":"    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);","highlight_start":15,"highlight_end":58}],"label":"the trait `nova_snark::traits::Group` is not implemented for `halo2curves::grumpkin::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `nova_snark::traits::Group`:\n  pasta_curves::curves::Ep\n  pasta_curves::curves::Eq\n  halo2curves::bn256::curve::G1\n  halo2curves::grumpkin::curve::G1","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `nova_snark::spartan::snark::RelaxedR1CSSNARK`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1733,"byte_end":1738,"line_start":50,"line_end":50,"column_start":32,"column_end":37,"is_primary":true,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":32,"highlight_end":37}],"label":"required by this bound in `RelaxedR1CSSNARK`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::grumpkin::curve::G1: nova_snark::traits::Group` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:90:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `nova_snark::traits::Group` is not implemented for `halo2curves::grumpkin::curve::G1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nova_snark::traits::Group`:\u001b[0m\n\u001b[0m             pasta_curves::curves::Ep\u001b[0m\n\u001b[0m             pasta_curves::curves::Eq\u001b[0m\n\u001b[0m             halo2curves::bn256::curve::G1\u001b[0m\n\u001b[0m             halo2curves::grumpkin::curve::G1\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `nova_snark::spartan::snark::RelaxedR1CSSNARK`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs:50:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RelaxedR1CSSNARK`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":4580,"byte_end":4583,"line_start":146,"line_end":146,"column_start":38,"column_end":41,"is_primary":true,"text":[{"text":"    let res = recursive_snark.verify(&pp, iteration_count + iteration_count_continue, &start_public_input, &z0_secondary);","highlight_start":38,"highlight_end":41}],"label":"expected `&PublicParams<_, _, ..., ...>`, found `&PublicParams<G1, G1, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/toy_bn254.rs","byte_start":4573,"byte_end":4579,"line_start":146,"line_end":146,"column_start":31,"column_end":37,"is_primary":false,"text":[{"text":"    let res = recursive_snark.verify(&pp, iteration_count + iteration_count_continue, &start_public_input, &z0_secondary);","highlight_start":31,"highlight_end":37}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`PublicParams<G1, G1, _, _>` and `PublicParams<_, _, ..., ...>` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`PublicParams<G1, G1, _, _>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":1423,"byte_end":1462,"line_start":58,"line_end":58,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<E1, E2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs","byte_start":1390,"byte_end":1429,"line_start":54,"line_end":54,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<G1, G2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `nova_snark` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs","byte_start":12917,"byte_end":12923,"line_start":399,"line_end":399,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"  pub fn verify(","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:146:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = recursive_snark.verify(&pp, iteration_count + iteration_count_continue, &start_public_input, &z0_secondary);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&PublicParams<_, _, ..., ...>`, found `&PublicParams<G1, G1, _, _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `PublicParams<G1, G1, _, _>` and `PublicParams<_, _, ..., ...>` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<G1, G1, _, _>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:58:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<E1, E2, C1, C2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs:54:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<G1, G2, C1, C2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `nova_snark` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs:399:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  pub fn verify(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":4844,"byte_end":4851,"line_start":154,"line_end":154,"column_start":43,"column_end":50,"is_primary":true,"text":[{"text":"    assert_eq!(res.clone().unwrap().0[0], F::<G1>::from(31));","highlight_start":43,"highlight_end":50}],"label":"the trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `nova_snark::traits::Group`:\n  pasta_curves::curves::Ep\n  pasta_curves::curves::Eq\n  halo2curves::bn256::curve::G1\n  halo2curves::grumpkin::curve::G1","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:154:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    assert_eq!(res.clone().unwrap().0[0], F::<G1>::from(31));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nova_snark::traits::Group`:\u001b[0m\n\u001b[0m              pasta_curves::curves::Ep\u001b[0m\n\u001b[0m              pasta_curves::curves::Eq\u001b[0m\n\u001b[0m              halo2curves::bn256::curve::G1\u001b[0m\n\u001b[0m              halo2curves::grumpkin::curve::G1\u001b[0m\n\n"}
{"message":"the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"examples/toy_bn254.rs","byte_start":4898,"byte_end":4905,"line_start":155,"line_end":155,"column_start":35,"column_end":42,"is_primary":true,"text":[{"text":"    assert_eq!(res.unwrap().0[1], F::<G1>::from(115));","highlight_start":35,"highlight_end":42}],"label":"the trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `nova_snark::traits::Group`:\n  pasta_curves::curves::Ep\n  pasta_curves::curves::Eq\n  halo2curves::bn256::curve::G1\n  halo2curves::grumpkin::curve::G1","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `halo2curves::bn256::curve::G1: nova_snark::traits::Group` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/toy_bn254.rs:155:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    assert_eq!(res.unwrap().0[1], F::<G1>::from(115));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `nova_snark::traits::Group` is not implemented for `halo2curves::bn256::curve::G1`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nova_snark::traits::Group`:\u001b[0m\n\u001b[0m              pasta_curves::curves::Ep\u001b[0m\n\u001b[0m              pasta_curves::curves::Eq\u001b[0m\n\u001b[0m              halo2curves::bn256::curve::G1\u001b[0m\n\u001b[0m              halo2curves::grumpkin::curve::G1\u001b[0m\n\n"}
{"message":"aborting due to 32 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 32 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0308, E0432, E0599, E0603.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308, E0432, E0599, E0603.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
