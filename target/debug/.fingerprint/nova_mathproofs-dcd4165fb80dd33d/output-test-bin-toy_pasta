{"message":"unused imports: `Group`, `circuit::StepCircuit`, `provider`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":210,"byte_end":218,"line_start":7,"line_end":7,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    provider,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/toy_pasta.rs","byte_start":233,"byte_end":253,"line_start":8,"line_end":8,"column_start":14,"column_end":34,"is_primary":true,"text":[{"text":"    traits::{circuit::StepCircuit, Group},","highlight_start":14,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/toy_pasta.rs","byte_start":255,"byte_end":260,"line_start":8,"line_end":8,"column_start":36,"column_end":41,"is_primary":true,"text":[{"text":"    traits::{circuit::StepCircuit, Group},","highlight_start":36,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":210,"byte_end":267,"line_start":7,"line_end":9,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    provider,","highlight_start":5,"highlight_end":14},{"text":"    traits::{circuit::StepCircuit, Group},","highlight_start":1,"highlight_end":43},{"text":"    CompressedSNARK, PublicParams,","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Group`, `circuit::StepCircuit`, `provider`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    provider,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    traits::{circuit::StepCircuit, Group},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"the trait bound `Ep: Engine` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":1211,"byte_end":1237,"line_start":38,"line_end":38,"column_start":13,"column_end":39,"is_primary":true,"text":[{"text":"    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());","highlight_start":13,"highlight_end":39}],"label":"the trait `Engine` is not implemented for `Ep`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Engine`:\n  Bn256EngineKZG\n  Bn256Engine\n  GrumpkinEngine\n  Secp256k1Engine\n  Secq256k1Engine\n  PallasEngine\n  VestaEngine","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `PublicParams`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":1434,"byte_end":1446,"line_start":58,"line_end":58,"column_start":12,"column_end":24,"is_primary":false,"text":[{"text":"pub struct PublicParams<E1, E2, C1, C2>","highlight_start":12,"highlight_end":24}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":1475,"byte_end":1512,"line_start":60,"line_end":60,"column_start":7,"column_end":44,"is_primary":true,"text":[{"text":"  E1: Engine<Base = <E2 as Engine>::Scalar>,","highlight_start":7,"highlight_end":44}],"label":"required by this bound in `PublicParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Ep: Engine` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:38:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Engine` is not implemented for `Ep`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Engine`:\u001b[0m\n\u001b[0m             Bn256EngineKZG\u001b[0m\n\u001b[0m             Bn256Engine\u001b[0m\n\u001b[0m             GrumpkinEngine\u001b[0m\n\u001b[0m             Secp256k1Engine\u001b[0m\n\u001b[0m             Secq256k1Engine\u001b[0m\n\u001b[0m             PallasEngine\u001b[0m\n\u001b[0m             VestaEngine\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `PublicParams`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:60:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<E1, E2, C1, C2>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  E1: Engine<Base = <E2 as Engine>::Scalar>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PublicParams`\u001b[0m\n\n"}
{"message":"the trait bound `pasta_curves::Eq: Engine` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":1211,"byte_end":1237,"line_start":38,"line_end":38,"column_start":13,"column_end":39,"is_primary":true,"text":[{"text":"    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());","highlight_start":13,"highlight_end":39}],"label":"the trait `Engine` is not implemented for `pasta_curves::Eq`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Engine`:\n  Bn256EngineKZG\n  Bn256Engine\n  GrumpkinEngine\n  Secp256k1Engine\n  Secq256k1Engine\n  PallasEngine\n  VestaEngine","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `pasta_curves::Eq: Engine` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:38:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Engine` is not implemented for `pasta_curves::Eq`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Engine`:\u001b[0m\n\u001b[0m             Bn256EngineKZG\u001b[0m\n\u001b[0m             Bn256Engine\u001b[0m\n\u001b[0m             GrumpkinEngine\u001b[0m\n\u001b[0m             Secp256k1Engine\u001b[0m\n\u001b[0m             Secq256k1Engine\u001b[0m\n\u001b[0m             PallasEngine\u001b[0m\n\u001b[0m             VestaEngine\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":1240,"byte_end":1274,"line_start":38,"line_end":38,"column_start":42,"column_end":76,"is_primary":true,"text":[{"text":"    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());","highlight_start":42,"highlight_end":76}],"label":"expected `PublicParams<Ep, Eq, _, _>`, found `PublicParams<_, _, ..., ...>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/toy_pasta.rs","byte_start":1211,"byte_end":1237,"line_start":38,"line_end":38,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());","highlight_start":13,"highlight_end":39}],"label":"expected due to this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`PublicParams<_, _, ..., ...>` and `PublicParams<Ep, Eq, _, _>` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs","byte_start":1390,"byte_end":1429,"line_start":54,"line_end":54,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<G1, G2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`PublicParams<Ep, Eq, _, _>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":1423,"byte_end":1462,"line_start":58,"line_end":58,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<E1, E2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `nova_snark` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:38:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let pp: PublicParams<G1, G2, _, _> = create_public_params(r1cs.clone());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `PublicParams<Ep, Eq, _, _>`, found `PublicParams<_, _, ..., ...>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected due to this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `PublicParams<_, _, ..., ...>` and `PublicParams<Ep, Eq, _, _>` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs:54:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<G1, G2, C1, C2>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<Ep, Eq, _, _>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:58:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<E1, E2, C1, C2>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `nova_snark` are being used?\u001b[0m\n\n"}
{"message":"the method `num_constraints` exists for struct `PublicParams<Ep, Eq, _, _>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":1366,"byte_end":1381,"line_start":42,"line_end":42,"column_start":12,"column_end":27,"is_primary":true,"text":[{"text":"        pp.num_constraints().0","highlight_start":12,"highlight_end":27}],"label":"method cannot be called on `PublicParams<Ep, Eq, _, _>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<Ep as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":30858,"byte_end":31004,"line_start":948,"line_end":959,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Ep,","highlight_start":1,"highlight_end":8},{"text":"    EpAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEp,","highlight_start":1,"highlight_end":11},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    \"pallas\",","highlight_start":1,"highlight_end":14},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `Ep: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":30858,"byte_end":31004,"line_start":948,"line_end":959,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Ep,","highlight_start":1,"highlight_end":8},{"text":"    EpAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEp,","highlight_start":1,"highlight_end":11},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    \"pallas\",","highlight_start":1,"highlight_end":14},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<pasta_curves::Eq as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":31006,"byte_end":31151,"line_start":960,"line_end":971,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Eq,","highlight_start":1,"highlight_end":8},{"text":"    EqAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEq,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    \"vesta\",","highlight_start":1,"highlight_end":13},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `pasta_curves::Eq: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":31006,"byte_end":31151,"line_start":960,"line_end":971,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Eq,","highlight_start":1,"highlight_end":8},{"text":"    EqAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEq,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    \"vesta\",","highlight_start":1,"highlight_end":13},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`<Ep as Engine>::Base = _`\n`<pasta_curves::Eq as Engine>::Base = _`\n`Ep: Engine`\n`pasta_curves::Eq: Engine`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `num_constraints` exists for struct `PublicParams<Ep, Eq, _, _>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:42:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pp.num_constraints().0\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `PublicParams<Ep, Eq, _, _>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs:948:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m948\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m949\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m950\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ep,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m951\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    EpAffine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m958\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    special_a0_b5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m959\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<Ep as Engine>::Base = _`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Ep: Engine`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m960\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m961\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m962\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Eq,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m963\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    EqAffine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m970\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    special_a0_b5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m971\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<pasta_curves::Eq as Engine>::Base = _`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `pasta_curves::Eq: Engine`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `<Ep as Engine>::Base = _`\u001b[0m\n\u001b[0m            `<pasta_curves::Eq as Engine>::Base = _`\u001b[0m\n\u001b[0m            `Ep: Engine`\u001b[0m\n\u001b[0m            `pasta_curves::Eq: Engine`\u001b[0m\n\n"}
{"message":"the method `num_constraints` exists for struct `PublicParams<Ep, Eq, _, _>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":1484,"byte_end":1499,"line_start":46,"line_end":46,"column_start":12,"column_end":27,"is_primary":true,"text":[{"text":"        pp.num_constraints().1","highlight_start":12,"highlight_end":27}],"label":"method cannot be called on `PublicParams<Ep, Eq, _, _>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<Ep as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":30858,"byte_end":31004,"line_start":948,"line_end":959,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Ep,","highlight_start":1,"highlight_end":8},{"text":"    EpAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEp,","highlight_start":1,"highlight_end":11},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    \"pallas\",","highlight_start":1,"highlight_end":14},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `Ep: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":30858,"byte_end":31004,"line_start":948,"line_end":959,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Ep,","highlight_start":1,"highlight_end":8},{"text":"    EpAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEp,","highlight_start":1,"highlight_end":11},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    \"pallas\",","highlight_start":1,"highlight_end":14},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<pasta_curves::Eq as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":31006,"byte_end":31151,"line_start":960,"line_end":971,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Eq,","highlight_start":1,"highlight_end":8},{"text":"    EqAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEq,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    \"vesta\",","highlight_start":1,"highlight_end":13},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `pasta_curves::Eq: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":31006,"byte_end":31151,"line_start":960,"line_end":971,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Eq,","highlight_start":1,"highlight_end":8},{"text":"    EqAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEq,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    \"vesta\",","highlight_start":1,"highlight_end":13},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`<Ep as Engine>::Base = _`\n`<pasta_curves::Eq as Engine>::Base = _`\n`Ep: Engine`\n`pasta_curves::Eq: Engine`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `num_constraints` exists for struct `PublicParams<Ep, Eq, _, _>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:46:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pp.num_constraints().1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `PublicParams<Ep, Eq, _, _>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs:948:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m948\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m949\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m950\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ep,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m951\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    EpAffine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m958\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    special_a0_b5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m959\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<Ep as Engine>::Base = _`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Ep: Engine`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m960\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m961\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m962\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Eq,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m963\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    EqAffine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m970\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    special_a0_b5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m971\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<pasta_curves::Eq as Engine>::Base = _`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `pasta_curves::Eq: Engine`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `<Ep as Engine>::Base = _`\u001b[0m\n\u001b[0m            `<pasta_curves::Eq as Engine>::Base = _`\u001b[0m\n\u001b[0m            `Ep: Engine`\u001b[0m\n\u001b[0m            `pasta_curves::Eq: Engine`\u001b[0m\n\n"}
{"message":"the method `num_variables` exists for struct `PublicParams<Ep, Eq, _, _>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":1599,"byte_end":1612,"line_start":51,"line_end":51,"column_start":12,"column_end":25,"is_primary":true,"text":[{"text":"        pp.num_variables().0","highlight_start":12,"highlight_end":25}],"label":"method cannot be called on `PublicParams<Ep, Eq, _, _>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<Ep as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":30858,"byte_end":31004,"line_start":948,"line_end":959,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Ep,","highlight_start":1,"highlight_end":8},{"text":"    EpAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEp,","highlight_start":1,"highlight_end":11},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    \"pallas\",","highlight_start":1,"highlight_end":14},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `Ep: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":30858,"byte_end":31004,"line_start":948,"line_end":959,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Ep,","highlight_start":1,"highlight_end":8},{"text":"    EpAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEp,","highlight_start":1,"highlight_end":11},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    \"pallas\",","highlight_start":1,"highlight_end":14},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<pasta_curves::Eq as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":31006,"byte_end":31151,"line_start":960,"line_end":971,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Eq,","highlight_start":1,"highlight_end":8},{"text":"    EqAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEq,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    \"vesta\",","highlight_start":1,"highlight_end":13},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `pasta_curves::Eq: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":31006,"byte_end":31151,"line_start":960,"line_end":971,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Eq,","highlight_start":1,"highlight_end":8},{"text":"    EqAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEq,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    \"vesta\",","highlight_start":1,"highlight_end":13},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`<Ep as Engine>::Base = _`\n`<pasta_curves::Eq as Engine>::Base = _`\n`Ep: Engine`\n`pasta_curves::Eq: Engine`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `num_variables` exists for struct `PublicParams<Ep, Eq, _, _>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:51:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pp.num_variables().0\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `PublicParams<Ep, Eq, _, _>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs:948:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m948\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m949\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m950\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ep,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m951\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    EpAffine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m958\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    special_a0_b5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m959\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<Ep as Engine>::Base = _`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Ep: Engine`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m960\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m961\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m962\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Eq,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m963\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    EqAffine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m970\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    special_a0_b5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m971\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<pasta_curves::Eq as Engine>::Base = _`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `pasta_curves::Eq: Engine`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `<Ep as Engine>::Base = _`\u001b[0m\n\u001b[0m            `<pasta_curves::Eq as Engine>::Base = _`\u001b[0m\n\u001b[0m            `Ep: Engine`\u001b[0m\n\u001b[0m            `pasta_curves::Eq: Engine`\u001b[0m\n\n"}
{"message":"the method `num_variables` exists for struct `PublicParams<Ep, Eq, _, _>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":1713,"byte_end":1726,"line_start":55,"line_end":55,"column_start":12,"column_end":25,"is_primary":true,"text":[{"text":"        pp.num_variables().1","highlight_start":12,"highlight_end":25}],"label":"method cannot be called on `PublicParams<Ep, Eq, _, _>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<Ep as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":30858,"byte_end":31004,"line_start":948,"line_end":959,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Ep,","highlight_start":1,"highlight_end":8},{"text":"    EpAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEp,","highlight_start":1,"highlight_end":11},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    \"pallas\",","highlight_start":1,"highlight_end":14},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `Ep: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":30858,"byte_end":31004,"line_start":948,"line_end":959,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Ep,","highlight_start":1,"highlight_end":8},{"text":"    EpAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEp,","highlight_start":1,"highlight_end":11},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    \"pallas\",","highlight_start":1,"highlight_end":14},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `<pasta_curves::Eq as Engine>::Base = _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":31006,"byte_end":31151,"line_start":960,"line_end":971,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Eq,","highlight_start":1,"highlight_end":8},{"text":"    EqAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEq,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    \"vesta\",","highlight_start":1,"highlight_end":13},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":1149,"byte_end":1150,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"doesn't satisfy `pasta_curves::Eq: Engine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":31006,"byte_end":31151,"line_start":960,"line_end":971,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"new_curve_impl!(","highlight_start":1,"highlight_end":17},{"text":"    (pub),","highlight_start":1,"highlight_end":11},{"text":"    Eq,","highlight_start":1,"highlight_end":8},{"text":"    EqAffine,","highlight_start":1,"highlight_end":14},{"text":"    IsoEq,","highlight_start":1,"highlight_end":11},{"text":"    Fq,","highlight_start":1,"highlight_end":8},{"text":"    Fp,","highlight_start":1,"highlight_end":8},{"text":"    \"vesta\",","highlight_start":1,"highlight_end":13},{"text":"    [0, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    [5, 0, 0, 0],","highlight_start":1,"highlight_end":18},{"text":"    special_a0_b5","highlight_start":1,"highlight_end":18},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"new_curve_impl!","def_site_span":{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs","byte_start":684,"byte_end":711,"line_start":29,"line_end":29,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! new_curve_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`<Ep as Engine>::Base = _`\n`<pasta_curves::Eq as Engine>::Base = _`\n`Ep: Engine`\n`pasta_curves::Eq: Engine`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `num_variables` exists for struct `PublicParams<Ep, Eq, _, _>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:55:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pp.num_variables().1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `PublicParams<Ep, Eq, _, _>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pasta_curves-0.5.1/src/curves.rs:948:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m948\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m949\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m950\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ep,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m951\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    EpAffine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m958\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    special_a0_b5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m959\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<Ep as Engine>::Base = _`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Ep: Engine`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m960\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mnew_curve_impl!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m961\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (pub),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m962\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Eq,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m963\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    EqAffine,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m970\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    special_a0_b5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m971\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<pasta_curves::Eq as Engine>::Base = _`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `pasta_curves::Eq: Engine`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `<Ep as Engine>::Base = _`\u001b[0m\n\u001b[0m            `<pasta_curves::Eq as Engine>::Base = _`\u001b[0m\n\u001b[0m            `Ep: Engine`\u001b[0m\n\u001b[0m            `pasta_curves::Eq: Engine`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":2007,"byte_end":2010,"line_start":65,"line_end":65,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        &pp,","highlight_start":9,"highlight_end":12}],"label":"expected `&PublicParams<_, _, ..., ...>`, found `&PublicParams<Ep, Eq, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/toy_pasta.rs","byte_start":1843,"byte_end":1867,"line_start":60,"line_end":60,"column_start":27,"column_end":51,"is_primary":false,"text":[{"text":"    let recursive_snark = create_recursive_circuit(","highlight_start":27,"highlight_end":51}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`PublicParams<Ep, Eq, _, _>` and `PublicParams<_, _, ..., ...>` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`PublicParams<Ep, Eq, _, _>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":1423,"byte_end":1462,"line_start":58,"line_end":58,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<E1, E2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs","byte_start":1390,"byte_end":1429,"line_start":54,"line_end":54,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<G1, G2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `nova_snark` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-scotia-0.5.0/src/lib.rs","byte_start":4502,"byte_end":4526,"line_start":156,"line_end":156,"column_start":8,"column_end":32,"is_primary":true,"text":[{"text":"pub fn create_recursive_circuit<G1, G2>(","highlight_start":8,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:65:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let recursive_snark = create_recursive_circuit(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this function are incorrect\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &pp,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&PublicParams<_, _, ..., ...>`, found `&PublicParams<Ep, Eq, _, _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `PublicParams<Ep, Eq, _, _>` and `PublicParams<_, _, ..., ...>` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<Ep, Eq, _, _>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:58:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<E1, E2, C1, C2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs:54:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<G1, G2, C1, C2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `nova_snark` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-scotia-0.5.0/src/lib.rs:156:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn create_recursive_circuit<G1, G2>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":2316,"byte_end":2319,"line_start":76,"line_end":76,"column_start":38,"column_end":41,"is_primary":true,"text":[{"text":"    let res = recursive_snark.verify(&pp, iteration_count, &start_public_input, &z0_secondary);","highlight_start":38,"highlight_end":41}],"label":"expected `&PublicParams<_, _, ..., ...>`, found `&PublicParams<Ep, Eq, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/toy_pasta.rs","byte_start":2309,"byte_end":2315,"line_start":76,"line_end":76,"column_start":31,"column_end":37,"is_primary":false,"text":[{"text":"    let res = recursive_snark.verify(&pp, iteration_count, &start_public_input, &z0_secondary);","highlight_start":31,"highlight_end":37}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`PublicParams<Ep, Eq, _, _>` and `PublicParams<_, _, ..., ...>` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`PublicParams<Ep, Eq, _, _>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":1423,"byte_end":1462,"line_start":58,"line_end":58,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<E1, E2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs","byte_start":1390,"byte_end":1429,"line_start":54,"line_end":54,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"pub struct PublicParams<G1, G2, C1, C2>","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `nova_snark` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs","byte_start":12917,"byte_end":12923,"line_start":399,"line_end":399,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"  pub fn verify(","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:76:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = recursive_snark.verify(&pp, iteration_count, &start_public_input, &z0_secondary);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&PublicParams<_, _, ..., ...>`, found `&PublicParams<Ep, Eq, _, _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `PublicParams<Ep, Eq, _, _>` and `PublicParams<_, _, ..., ...>` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<Ep, Eq, _, _>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:58:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<E1, E2, C1, C2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `PublicParams<_, _, ..., ...>` is defined in crate `nova_snark`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs:54:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PublicParams<G1, G2, C1, C2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `nova_snark` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/lib.rs:399:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  pub fn verify(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\n"}
{"message":"the function or associated item `setup` exists for struct `CompressedSNARK<_, _, _, _, RelaxedR1CSSNARK<Ep, EvaluationEngine<Ep>>, RelaxedR1CSSNARK<Eq, ...>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":2717,"byte_end":2722,"line_start":88,"line_end":88,"column_start":65,"column_end":70,"is_primary":true,"text":[{"text":"    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();","highlight_start":65,"highlight_end":70}],"label":"function or associated item cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: RelaxedR1CSSNARKTrait<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the full type name has been written to '/Users/nk-mac/Documents/Research/nova_mathproofs/target/debug/deps/toy_pasta-dcd4165fb80dd33d.long-type-2373484294025262273.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following trait bounds were not satisfied:\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<Ep, nova_snark::provider::ipa_pc::EvaluationEngine<Ep>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<pasta_curves::Eq, nova_snark::provider::ipa_pc::EvaluationEngine<pasta_curves::Eq>>: RelaxedR1CSSNARKTrait<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the function or associated item `setup` exists for struct `CompressedSNARK<_, _, _, _, RelaxedR1CSSNARK<Ep, EvaluationEngine<Ep>>, RelaxedR1CSSNARK<Eq, ...>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:88:65\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs:50:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/nk-mac/Documents/Research/nova_mathproofs/target/debug/deps/toy_pasta-dcd4165fb80dd33d.long-type-2373484294025262273.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<Ep, nova_snark::provider::ipa_pc::EvaluationEngine<Ep>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<pasta_curves::Eq, nova_snark::provider::ipa_pc::EvaluationEngine<pasta_curves::Eq>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\n"}
{"message":"the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<Ep, nova_snark::provider::ipa_pc::EvaluationEngine<Ep>>: RelaxedR1CSSNARKTrait<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":2672,"byte_end":2715,"line_start":88,"line_end":88,"column_start":20,"column_end":63,"is_primary":true,"text":[{"text":"    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();","highlight_start":20,"highlight_end":63}],"label":"the trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<Ep, nova_snark::provider::ipa_pc::EvaluationEngine<Ep>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\n  nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\n  nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CompressedSNARK`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20636,"byte_end":20651,"line_start":635,"line_end":635,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"pub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>","highlight_start":12,"highlight_end":27}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20840,"byte_end":20865,"line_start":641,"line_end":641,"column_start":7,"column_end":32,"is_primary":true,"text":[{"text":"  S1: RelaxedR1CSSNARKTrait<E1>,","highlight_start":7,"highlight_end":32}],"label":"required by this bound in `CompressedSNARK`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<Ep, nova_snark::provider::ipa_pc::EvaluationEngine<Ep>>: RelaxedR1CSSNARKTrait<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:88:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<Ep, nova_snark::provider::ipa_pc::EvaluationEngine<Ep>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\u001b[0m\n\u001b[0m              nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m              nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CompressedSNARK`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:641:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m635\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  S1: RelaxedR1CSSNARKTrait<E1>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CompressedSNARK`\u001b[0m\n\n"}
{"message":"the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<pasta_curves::Eq, nova_snark::provider::ipa_pc::EvaluationEngine<pasta_curves::Eq>>: RelaxedR1CSSNARKTrait<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":2672,"byte_end":2715,"line_start":88,"line_end":88,"column_start":20,"column_end":63,"is_primary":true,"text":[{"text":"    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();","highlight_start":20,"highlight_end":63}],"label":"the trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<pasta_curves::Eq, nova_snark::provider::ipa_pc::EvaluationEngine<pasta_curves::Eq>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\n  nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\n  nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CompressedSNARK`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20636,"byte_end":20651,"line_start":635,"line_end":635,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"pub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>","highlight_start":12,"highlight_end":27}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20873,"byte_end":20898,"line_start":642,"line_end":642,"column_start":7,"column_end":32,"is_primary":true,"text":[{"text":"  S2: RelaxedR1CSSNARKTrait<E2>,","highlight_start":7,"highlight_end":32}],"label":"required by this bound in `CompressedSNARK`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<pasta_curves::Eq, nova_snark::provider::ipa_pc::EvaluationEngine<pasta_curves::Eq>>: RelaxedR1CSSNARKTrait<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:88:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (pk, vk) = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::setup(&pp).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<pasta_curves::Eq, nova_snark::provider::ipa_pc::EvaluationEngine<pasta_curves::Eq>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\u001b[0m\n\u001b[0m              nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m              nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CompressedSNARK`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:642:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m635\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m642\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  S2: RelaxedR1CSSNARKTrait<E2>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CompressedSNARK`\u001b[0m\n\n"}
{"message":"the function or associated item `prove` exists for struct `CompressedSNARK<_, _, _, _, RelaxedR1CSSNARK<Ep, EvaluationEngine<Ep>>, RelaxedR1CSSNARK<Eq, ...>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":2797,"byte_end":2802,"line_start":89,"line_end":89,"column_start":60,"column_end":65,"is_primary":true,"text":[{"text":"    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);","highlight_start":60,"highlight_end":65}],"label":"function or associated item cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs","byte_start":1702,"byte_end":1781,"line_start":50,"line_end":50,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {","highlight_start":1,"highlight_end":80}],"label":"doesn't satisfy `_: RelaxedR1CSSNARKTrait<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the full type name has been written to '/Users/nk-mac/Documents/Research/nova_mathproofs/target/debug/deps/toy_pasta-dcd4165fb80dd33d.long-type-6487672432608297932.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following trait bounds were not satisfied:\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<Ep, nova_snark::provider::ipa_pc::EvaluationEngine<Ep>>: RelaxedR1CSSNARKTrait<_>`\n`nova_snark::spartan::snark::RelaxedR1CSSNARK<pasta_curves::Eq, nova_snark::provider::ipa_pc::EvaluationEngine<pasta_curves::Eq>>: RelaxedR1CSSNARKTrait<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the function or associated item `prove` exists for struct `CompressedSNARK<_, _, _, _, RelaxedR1CSSNARK<Ep, EvaluationEngine<Ep>>, RelaxedR1CSSNARK<Eq, ...>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:89:60\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.23.0/src/spartan/snark.rs:50:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RelaxedR1CSSNARK<G: Group, EE: EvaluationEngineTrait<G, CE = G::CE>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/nk-mac/Documents/Research/nova_mathproofs/target/debug/deps/toy_pasta-dcd4165fb80dd33d.long-type-6487672432608297932.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<Ep, nova_snark::provider::ipa_pc::EvaluationEngine<Ep>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\u001b[0m           `nova_snark::spartan::snark::RelaxedR1CSSNARK<pasta_curves::Eq, nova_snark::provider::ipa_pc::EvaluationEngine<pasta_curves::Eq>>: RelaxedR1CSSNARKTrait<_>`\u001b[0m\n\n"}
{"message":"the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<Ep, nova_snark::provider::ipa_pc::EvaluationEngine<Ep>>: RelaxedR1CSSNARKTrait<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":2752,"byte_end":2795,"line_start":89,"line_end":89,"column_start":15,"column_end":58,"is_primary":true,"text":[{"text":"    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);","highlight_start":15,"highlight_end":58}],"label":"the trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<Ep, nova_snark::provider::ipa_pc::EvaluationEngine<Ep>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\n  nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\n  nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CompressedSNARK`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20636,"byte_end":20651,"line_start":635,"line_end":635,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"pub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>","highlight_start":12,"highlight_end":27}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20840,"byte_end":20865,"line_start":641,"line_end":641,"column_start":7,"column_end":32,"is_primary":true,"text":[{"text":"  S1: RelaxedR1CSSNARKTrait<E1>,","highlight_start":7,"highlight_end":32}],"label":"required by this bound in `CompressedSNARK`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<Ep, nova_snark::provider::ipa_pc::EvaluationEngine<Ep>>: RelaxedR1CSSNARKTrait<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:89:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<Ep, nova_snark::provider::ipa_pc::EvaluationEngine<Ep>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\u001b[0m\n\u001b[0m              nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m              nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CompressedSNARK`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:641:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m635\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  S1: RelaxedR1CSSNARKTrait<E1>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CompressedSNARK`\u001b[0m\n\n"}
{"message":"the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<pasta_curves::Eq, nova_snark::provider::ipa_pc::EvaluationEngine<pasta_curves::Eq>>: RelaxedR1CSSNARKTrait<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/toy_pasta.rs","byte_start":2752,"byte_end":2795,"line_start":89,"line_end":89,"column_start":15,"column_end":58,"is_primary":true,"text":[{"text":"    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);","highlight_start":15,"highlight_end":58}],"label":"the trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<pasta_curves::Eq, nova_snark::provider::ipa_pc::EvaluationEngine<pasta_curves::Eq>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\n  nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\n  nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CompressedSNARK`","code":null,"level":"note","spans":[{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20636,"byte_end":20651,"line_start":635,"line_end":635,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"pub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>","highlight_start":12,"highlight_end":27}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs","byte_start":20873,"byte_end":20898,"line_start":642,"line_end":642,"column_start":7,"column_end":32,"is_primary":true,"text":[{"text":"  S2: RelaxedR1CSSNARKTrait<E2>,","highlight_start":7,"highlight_end":32}],"label":"required by this bound in `CompressedSNARK`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `nova_snark::spartan::snark::RelaxedR1CSSNARK<pasta_curves::Eq, nova_snark::provider::ipa_pc::EvaluationEngine<pasta_curves::Eq>>: RelaxedR1CSSNARKTrait<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/toy_pasta.rs:89:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = CompressedSNARK::<_, _, _, _, S<G1>, S<G2>>::prove(&pp, &pk, &recursive_snark);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `RelaxedR1CSSNARKTrait<_>` is not implemented for `nova_snark::spartan::snark::RelaxedR1CSSNARK<pasta_curves::Eq, nova_snark::provider::ipa_pc::EvaluationEngine<pasta_curves::Eq>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `RelaxedR1CSSNARKTrait<E>`:\u001b[0m\n\u001b[0m              nova_snark::spartan::ppsnark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m              nova_snark::spartan::snark::RelaxedR1CSSNARK<E, EE>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CompressedSNARK`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nk-mac/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nova-snark-0.32.0/src/lib.rs:642:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m635\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CompressedSNARK<E1, E2, C1, C2, S1, S2>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m642\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  S2: RelaxedR1CSSNARKTrait<E2>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CompressedSNARK`\u001b[0m\n\n"}
{"message":"aborting due to 15 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 15 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0308, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
